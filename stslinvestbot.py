import logging
import datetime
import time

import lxml
import pandas
import requests
import telebot
from bs4 import BeautifulSoup
from openapi_client import openapi

# token Telegram
token_bot = telebot.TeleBot('token')

# token api –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
client_invest = openapi.sandbox_api_client(
    'token')

# main keyboard user
main_user_keyboard = telebot.types.ReplyKeyboardMarkup(True, False)
main_user_keyboard.row('\ud83c\udf25–ü–æ–≥–æ–¥–∞', '\ud83d\udcf0–ù–æ–≤–æ—Å—Ç–∏', '\u26fd\ufe0f–ù–µ—Ñ—Ç—å')
main_user_keyboard.row('\ud83d\udcbc–ü–æ—Ä—Ç—Ñ–µ–ª—å', '–î—Ä—É–≥–∏–µ –∞–∫—Ü–∏–∏', '\ud83c\udf24–ü–æ–≥–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ')

# keyboard button back
user_keyboard_back = telebot.types.ReplyKeyboardMarkup(True, False)
user_keyboard_back.row('–ù–∞–∑–∞–¥')

# keyboard button back and request geo-coordinates
user_keyboard_geo_back = telebot.types.ReplyKeyboardMarkup(True, False)
user_keyboard_geo_back.add(telebot.types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True),
                           '–ù–∞–∑–∞–¥')

name_portfolio = [['–ü–æ—Ä—Ç—Ñ–µ–ª—å'], ['üíº–ü–æ—Ä—Ç—Ñ–µ–ª—å']]
name_weather = [['–ü–æ–≥–æ–¥–∞'], ['üå•–ü–æ–≥–æ–¥–∞'], ['Weather']]
name_stock = [['–î—Ä—É–≥–∞—è –ê–∫—Ü–∏—è'], ['–ê–∫—Ü–∏—è'], ['–î—Ä—É–≥–∏–µ –ê–∫—Ü–∏–∏']]
name_brent = [['–ù–µ—Ñ—Ç—å'], ['Brent'], ['‚õΩÔ∏è–ù–µ—Ñ—Ç—å']]
name_yandex_news = [['–ù–æ–≤–æ—Å—Ç–∏'], ['üì∞–ù–æ–≤–æ—Å—Ç–∏']]
name_weather_other = [['–ü–æ–≥–æ–¥–∞ –í –î—Ä—É–≥–æ–º –ì–æ—Ä–æ–¥–µ'], ['–ü–æ–≥–æ–¥–∞ –í'], ['üå§–ü–æ–≥–æ–¥–∞ –í –î—Ä—É–≥–æ–º –ì–æ—Ä–æ–¥–µ']]
name_weather_tomorrow = [['–ü–æ–≥–æ–¥–∞ –ó–∞–≤—Ç—Ä–∞'], ['–ü–æ–≥–æ–¥–∞ –ù–∞ –ó–∞–≤—Ç—Ä–∞']]
name_city_selection = [['–í—ã–±–æ—Ä –ì–æ—Ä–æ–¥–∞']]
name_back = [['–ù–∞–∑–∞–¥']]


def button_back(message):
    token_bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–æ, –Ω–∞–∑–∞–¥.', reply_markup=main_user_keyboard)
    token_bot.register_next_step_handler(message, get_text_messages)


def portfolio_stock(url='https://smart-lab.ru/q/portfolio/Markitant/29595/'):
    """
    Parser portfolio on SmartLab.
    :param url:
    :return: data_portfolio: all data on the portfolio
    """
    data_portfolio_url = pandas.read_html(url)
    data_portfolio = '*–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:*\n'
    for i in range(10):
        try:
            df_rus = data_portfolio_url[i][['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–µ–∫—É—â.—Ü–µ–Ω–∞', '–ò–∑–º, –¥–µ–Ω—å %']]
            for row in df_rus.iloc:
                title, price, diff = row
                diff = str(diff).split()
                data_portfolio += str(title) + ': ' + str(price) + ' (' + ''.join(diff) + ')\n'
        except KeyError:
            data_portfolio += ''
    data_portfolio += '*–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ü–∏–∏:*\n'
    for i in range(10):
        try:
            df_calendar = data_portfolio_url[i][['–î–∞—Ç–∞', '–û–ø–∏—Å–∞–Ω–∏–µ']]
            for row in df_calendar.iloc:
                date, description = row
                data_portfolio += str(date) + ' ' + str(description) + ' ' + '\n'
        except KeyError:
            data_portfolio += ''
    return data_portfolio


def data_stock(ticker):
    """
    Parser ticker, the desired ticker is passed to the function.
    :param ticker:
    :return:data_stock_total: full data about the promotion for the day
    """
    instr = client_invest.market.market_search_by_ticker_get(ticker).payload.instruments[0]
    name_company_share = instr.name
    close_price = client_invest.market.market_orderbook_get(instr.figi, 1).payload.close_price
    last_price = client_invest.market.market_orderbook_get(instr.figi, 1).payload.last_price
    day_data_share = 100 * (last_price - close_price) / close_price
    data_stock_total = name_company_share + ': ' + str(last_price) + ' (' + str(round(day_data_share, 2)) + '%)'
    return data_stock_total


def weather_today(city='https://yandex.ru/pogoda/cheboksary'):
    """
    Parser weather, the function is passed the name of the city in English.
    :param city: there may be a ready-made link to the site or a list with words where the name of cities can be
    :return: data_weather_today: weather data today
    """
    if isinstance(city, list):
        for i in range(len(city)):
            if requests.get('https://yandex.ru/pogoda/' + city[i]).status_code != 200:
                continue
            else:
                city = 'https://yandex.ru/pogoda/' + city[i]
                break
    if isinstance(city, list):
        city = 'https://yandex.ru/pogoda/cheboksary'
    try:
        data_link = requests.get(city).text
        parser_data = BeautifulSoup(data_link, 'html.parser')
        time_city = parser_data.find('time', class_='time fact__time').text
        weather_city_all_data = parser_data.find('div', class_='temp fact__temp fact__temp_size_s')
        weather_city_temp = weather_city_all_data.find('span', class_='temp__value').text
        condition_day_city = parser_data.find('div', class_='link__condition day-anchor i-bem').text
        name_city = parser_data.find('h1', class_='title title_level_1 header-title__title').text
        rainfall_city = parser_data.find('p', class_='maps-widget-fact__title').text
        data_weather_today = time_city + '\n' + name_city + ': ' + weather_city_temp + '¬∞, ' + condition_day_city + '\n' + rainfall_city
    except NameError:
        data_weather_today = '–ù–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É!'
    return data_weather_today


def weather_tomorrow(city):
    """
    Parser weather for tomorrow, the function is passed the name of the city in English.
    :param city:
    :return: data_weather_today: weather data tomorrow
    """
    try:
        date_tomorrow = datetime.date.today() + datetime.timedelta(days=1)
        data_link = requests.get(city).text
        parser_data = BeautifulSoup(data_link, 'html.parser')
        name_city = parser_data.find('div', class_='header-title').text[20:]
        weather_card = parser_data.findAll('div', class_='card')[2]
        weather_table_tomorrow = weather_card.find('tbody', class_='weather-table__body')
        weather_city_all_data_tomorrow = weather_table_tomorrow.findAll('tr', class_='weather-table__row')[1]
        weather_city_temp = weather_city_all_data_tomorrow.findAll('div', class_='temp')[1].text
        condition_day_city = weather_city_all_data_tomorrow.find('td',
                                                                 class_='weather-table__body-cell weather-table__body-cell_type_condition').text
        data_weather_tomorrow = '–ó–∞–≤—Ç—Ä–∞ ' + date_tomorrow.strftime('%d.%m') + ' ' \
                                + name_city + ', ' + weather_city_temp + ', ' + condition_day_city
    except Error:
        data_weather_tomorrow = '–ù–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É!'
    return data_weather_tomorrow


def oil_brent():
    """
    Parser of petroleum.
    :return: date_brent: data petroleum
    """
    link_brent = 'https://www.finam.ru/quote/tovary/brent/'
    data_link = requests.get(link_brent).text
    parser_data = BeautifulSoup(data_link, 'html.parser')
    price_brent = '$' + parser_data.find('span', class_='PriceInformation__price--26G').text
    day_data_brent = parser_data.find('sub', class_='PriceInformation__subContainer--2qx').text
    date_brent = f'–ù–µ—Ñ—Ç—å Brent: {price_brent} ({day_data_brent})'
    return date_brent


def yandex_news():
    """
    Parser news Yandex.
    :return: day_data_news: news day
    """
    link_news = 'https://yandex.ru'
    data_link = requests.get(link_news).text
    parser_data = BeautifulSoup(data_link, 'html.parser')
    day_data_news = '*–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞:*\n\n'
    data_news = parser_data.findAll('a', class_='home-link list__item-content list__item-content_with-icon '
                                                'home-link_black_yes')  # –∏—â–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    for news_link in data_news[:5]:
        day_data_news += news_link.text + '\n\n'  # –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏ (–≤—Å–µ–≥–æ –∏—Ö 10), –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ 5
    return day_data_news


def other_stock(message):
    """
    Process the data strings to find out the ticker.
    :param message:
    :return:
    """
    line_words = message.text.split()
    ticker = message
    if isinstance(line_words, list):
        for i in range(len(line_words)):
            instr = client_invest.market.market_search_by_ticker_get_with_http_info(line_words[i])
            if str(instr[0].payload.instruments) == '[]':
                continue
            else:
                ticker = line_words[i]
                break
    if isinstance(ticker, list):
        ticker = 'yndx'
    instr = client_invest.market.market_search_by_ticker_get_with_http_info(str(ticker))
    if message.text == '–ù–∞–∑–∞–¥':
        button_back(message)
    elif str(instr[0].payload.instruments) == '[]':
        msg = token_bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π —Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä:',
                                     reply_markup=user_keyboard_back)
        token_bot.register_next_step_handler(msg, other_stock)
        return
    elif str(instr[0].payload.instruments) != '[]' and ticker != '–ù–∞–∑–∞–¥':
        token_bot.send_message(message.from_user.id, data_stock(ticker), reply_markup=main_user_keyboard)
        return data_stock(ticker)


def other_weather(message, day_value):
    link_weather_standard = 'https://yandex.ru/pogoda/'
    if message.location is not None:
        if day_value == 'today':
            link_weather = link_weather_standard + '?lat=' + str(message.location.latitude) + '&lon=' + \
                           str(message.location.longitude)
        else:
            link_weather = link_weather_standard + 'details?lat=' + str(message.location.latitude) + '&lon=' + \
                           str(message.location.longitude)
    else:
        if day_value == 'today':
            link_weather = link_weather_standard + message.text
        else:
            link_weather = link_weather_standard + message.text + '/details?via=ms'

        if message.text == '–ù–∞–∑–∞–¥':
            button_back(message)
            return
        elif requests.get(link_weather).status_code != 200:
            message = token_bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!'
                                                              '\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
            token_bot.register_next_step_handler(message, lambda message_received: other_weather(message_received,
                                                                                                 day_value))
            return
    if link_weather != '–ù–∞–∑–∞–¥' and requests.get(link_weather).status_code == 200:
        if day_value == 'today':
            token_bot.send_message(message.from_user.id, weather_today(link_weather),
                                   reply_markup=main_user_keyboard)
        else:
            token_bot.send_message(message.from_user.id, weather_tomorrow(link_weather),
                                   reply_markup=main_user_keyboard)


@token_bot.message_handler(commands=['start', 'help'])
def cmd_start(message):
    token_bot.send_message(message.chat.id,
                           '–ü—Ä–∏–≤–µ—Ç, —Ç–æ–≤–∞—Ä–∏—â! –≠—Ç–æ –°–µ—Ç—É–Ω—å –¢–µ–ª–µ–≥—Ä–∞—Ñ.'
                           '\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –Ω–∞ –Ω–µ—Ñ—Ç—å, –∞–∫—Ü–∏–∏, –ø–æ–≥–æ–¥—É –∏ –Ω–æ–≤–æ—Å—Ç–∏.'
                           '\n–ö–æ–º–∞–Ω–¥—ã:'
                           '\n1. –ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞'
                           '\n2. –ü–æ–≥–æ–¥–∞ {–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º}'
                           '\n3. –¶–µ–Ω–∞ {—Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞}'
                           '\n–ü–æ–º–æ—â—å: @stslq',
                           reply_markup=main_user_keyboard)


@token_bot.message_handler(content_types=['text'])
def get_text_messages(message):
    """
    This is a method that receives messages and processes them.
    :param message:
    :return:
    """
    line_message = message.text.title()
    line_words = line_message.split()
    if [line_message] in name_back:
        button_back(message)
    elif [line_message] in name_weather:
        token_bot.send_message(message.chat.id, weather_today())
    elif [line_message] in name_portfolio:
        token_bot.send_message(message.chat.id, portfolio_stock(), parse_mode='Markdown')
    elif [line_message] in name_brent:
        token_bot.send_message(message.chat.id, oil_brent())
    elif [line_message] in name_stock:
        token_bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π —Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä USD000UTSTOM - –±—É–¥–µ—Ç –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞:',
                               reply_markup=user_keyboard_back)
        token_bot.register_next_step_handler(message, other_stock)
    elif [line_message] in name_yandex_news:
        token_bot.send_message(message.chat.id, yandex_news(), parse_mode='Markdown')
    elif [line_message] in name_weather_other:
        message = token_bot.send_message(message.chat.id,
                                         '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–∏–π—Å–∫–æ–º.',
                                         reply_markup=user_keyboard_geo_back)
        token_bot.register_next_step_handler(message, lambda message_received: other_weather(message_received, 'today'))
    elif [line_message] in name_weather_tomorrow:
        message = token_bot.send_message(message.chat.id,
                                         '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–∏–π—Å–∫–æ–º.',
                                         reply_markup=user_keyboard_geo_back)
        token_bot.register_next_step_handler(message,
                                             lambda message_received: other_weather(message_received, 'tomorrow'))
    elif {True for x in line_words if (x == '–¶–µ–Ω–∞' or x == 'Price')}:
        other_stock(message)
    elif {True for x in line_words if (x == '–ü–æ–≥–æ–¥–∞' or x == 'Weather')}:
        token_bot.send_message(message.chat.id, weather_today(line_words))
    elif [line_message] in name_city_selection:
        message = token_bot.send_message(message.chat.id,
                                         '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–∏–π—Å–∫–æ–º.',
                                         reply_markup=user_keyboard_geo_back)
        token_bot.register_next_step_handler(message, lambda message_received: other_weather(message_received, 'today'))
    else:
        token_bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ /help')


if __name__ == '__main__':
    while True:
        try:
            token_bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(3)
            print(e)
