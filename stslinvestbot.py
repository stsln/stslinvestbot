import logging

import lxml
import pandas
import requests
import telebot
from bs4 import BeautifulSoup
from openapi_client import openapi

token_bot = telebot.TeleBot('token')

token_invest = 'token'
client_invest = openapi.sandbox_api_client(token_invest)

user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
user_markup.row('\ud83c\udf25–ü–æ–≥–æ–¥–∞', '\ud83d\udcf0–ù–æ–≤–æ—Å—Ç–∏', '\u26fd\ufe0f–ù–µ—Ñ—Ç—å')
user_markup.row('\ud83d\udcbc–ü–æ—Ä—Ç—Ñ–µ–ª—å', '–î—Ä—É–≥–∏–µ –∞–∫—Ü–∏–∏', '\ud83c\udf24–ü–æ–≥–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ')

user_markup_end = telebot.types.ReplyKeyboardMarkup(True, False)
user_markup_end.row('–ù–∞–∑–∞–¥')

user_markup_geo_end = telebot.types.ReplyKeyboardMarkup(True, False)
user_markup_geo_end.add(telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True), '–ù–∞–∑–∞–¥')

name_portfolio = [['–ü–æ—Ä—Ç—Ñ–µ–ª—å'], ['üíº–ü–æ—Ä—Ç—Ñ–µ–ª—å'], ['üíº']]
name_weather = [['–ü–æ–≥–æ–¥–∞'], ['üå•–ü–æ–≥–æ–¥–∞'], ['üå•']]
name_stock = [['–î—Ä—É–≥–∞—è –ê–∫—Ü–∏—è'], ['–ê–∫—Ü–∏—è'], ['–î—Ä—É–≥–∏–µ –ê–∫—Ü–∏–∏']]
name_brent = [['–ù–µ—Ñ—Ç—å'], ['Brent'], ['‚õΩÔ∏è–ù–µ—Ñ—Ç—å']]
name_yandex_news = [['–ù–æ–≤–æ—Å—Ç–∏'], ['News'], ['üì∞–ù–æ–≤–æ—Å—Ç–∏']]
name_weather_other = [['–ü–æ–≥–æ–¥–∞ –í –î—Ä—É–≥–æ–º –ì–æ—Ä–æ–¥–µ'], ['–ü–æ–≥–æ–¥–∞ –í'], ['üå• –≤'], ['üå§–ü–æ–≥–æ–¥–∞ –í –î—Ä—É–≥–æ–º –ì–æ—Ä–æ–¥–µ']]


def portfolio_stock(url):
    data_portfolio = "*–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:*\n\n"
    df_rus = pandas.read_html(url)[1][['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–µ–∫—É—â.—Ü–µ–Ω–∞', '–ò–∑–º, –¥–µ–Ω—å %']]
    for row in df_rus.iloc:
        title, price, diff = row
        diff = diff.split()
        data_portfolio += title + ": " + price + " (" + ''.join(diff) + ")\n"
    df_usd = pandas.read_html(url)[3][['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–µ–∫—É—â.—Ü–µ–Ω–∞', '–ò–∑–º, –¥–µ–Ω—å %']]
    for row in df_usd.iloc:
        title, price, diff = row
        diff = diff.split()
        data_portfolio += title + ": " + price + " (" + ''.join(diff) + ")\n"
    return data_portfolio


def data_stock(ticker):  # –ø–∞—Ä—Å–µ—Ä —Ç–∏–∫–µ—Ä–∞, –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω—É–∂–Ω—ã–π —Ç–∏–∫–µ—Ä
    instr = client_invest.market.market_search_by_ticker_get(ticker).payload.instruments[0]
    name_company_share = instr.name
    close_price = client_invest.market.market_orderbook_get(instr.figi, 1).payload.close_price
    last_price = client_invest.market.market_orderbook_get(instr.figi, 1).payload.last_price
    day_data_share = 100 * (last_price - close_price) / close_price
    data_stock_total = name_company_share + ": " + str(last_price) + " (" + str(round(day_data_share, 2)) + "%)"
    return data_stock_total


def weather(city):  # –ø–∞—Ä—Å–µ—Ä –ø–æ–≥–æ–¥—ã, –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    data_link = requests.get(city).text
    parser_data = BeautifulSoup(data_link, 'html.parser')
    time_city = parser_data.find('time', class_='time fact__time').text
    weather_city_all_data = parser_data.find('div', class_='temp fact__temp fact__temp_size_s')
    weather_city = weather_city_all_data.find('span', class_='temp__value').text
    condition_day_city = parser_data.find('div', class_='link__condition day-anchor i-bem').text
    name_city = parser_data.find('h1', class_='title title_level_1 header-title__title').text
    rainfall_city = parser_data.find('p', class_='maps-widget-fact__title').text
    data_weather = time_city + "\n" + name_city + ": " + weather_city + "¬∞, " + condition_day_city + "\n" + rainfall_city
    return data_weather


def oil_brent():  # –ø–∞—Ä—Å–µ—Ä –Ω–µ—Ñ—Ç–∏
    link_brent = "https://www.finam.ru/quote/tovary/brent/"
    data_link = requests.get(link_brent).text
    parser_data = BeautifulSoup(data_link, 'html.parser')
    price_brent = "$" + parser_data.find('span', class_='PriceInformation__price--26G').text
    day_data_brent = parser_data.find('sub', class_='PriceInformation__subContainer--2qx').text
    date_brent = "–ù–µ—Ñ—Ç—å Brent: " + price_brent + " (" + day_data_brent + ")"
    return date_brent


def yandex_news():  # –ø–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
    link_news = 'https://yandex.ru'
    data_link = requests.get(link_news).text
    parser_data = BeautifulSoup(data_link, 'html.parser')
    day_data_news = "*–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞:*\n\n"
    data_news = parser_data.findAll('a', class_='home-link list__item-content list__item-content_with-icon '
                                                'home-link_black_yes')  # –∏—â–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    for news_link in data_news[:5]:
        day_data_news += news_link.text + "\n\n"  # –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏ (–≤—Å–µ–≥–æ –∏—Ö 10), –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ 5
    return day_data_news


def other_stock(message):  # –¥—Ä—É–≥–∞—è –∞–∫—Ü–∏—è
    line_words = message.text.split()
    if len(line_words) == 2:
        ticker = line_words[1]
    else:
        ticker = message.text
    instr = client_invest.market.market_search_by_ticker_get_with_http_info(ticker)
    if ticker == "–ù–∞–∑–∞–¥":
        token_bot.send_message(message.from_user.id, "–•–æ—Ä–æ—à–æ, –Ω–∞–∑–∞–¥.", reply_markup=user_markup)
        token_bot.register_next_step_handler(message, get_text_messages)
    elif str(instr[0].payload.instruments) == "[]":
        msg = token_bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π —Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä:',
                                     reply_markup=user_markup_end)
        token_bot.register_next_step_handler(msg, other_stock)
        return
    if str(instr[0].payload.instruments) != "[]" and ticker != "–ù–∞–∑–∞–¥":
        token_bot.send_message(message.from_user.id, data_stock(ticker), reply_markup=user_markup)
        return data_stock(ticker)


def other_weather(message):
    if message.location is not None:
        link_weather = "https://yandex.ru/pogoda/?lat=" + str(message.location.latitude) + "&lon=" + \
                       str(message.location.longitude)
    else:
        link_weather = "https://yandex.ru/pogoda/" + message.text
        if message.text == "–ù–∞–∑–∞–¥":
            token_bot.send_message(message.from_user.id, "–•–æ—Ä–æ—à–æ, –Ω–∞–∑–∞–¥.", reply_markup=user_markup)
            token_bot.register_next_step_handler(message, get_text_messages)
            return
        elif requests.get(link_weather).status_code != 200:
            msg = token_bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
            token_bot.register_next_step_handler(msg, other_weather)
            return
    if link_weather != "–ù–∞–∑–∞–¥":
        token_bot.send_message(message.from_user.id, weather(link_weather), reply_markup=user_markup)


@token_bot.message_handler(commands=['start', 'help'])
def cmd_start(message):
    token_bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —Ç–æ–≤–∞—Ä–∏—â! –≠—Ç–æ –ò–Ω—Ñ–æ—Ä–º–±—é—Ä–æ."
                                            "\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –Ω–∞ –Ω–µ—Ñ—Ç—å, –∞–∫—Ü–∏–∏, –ø–æ–≥–æ–¥—É –∏ –Ω–æ–≤–æ—Å—Ç–∏."
                                            "\n\n*–¶–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 15 –º–∏–Ω—É—Ç."
                                            "\n–ü–æ–º–æ—â—å: @stslq",
                           reply_markup=user_markup)


@token_bot.message_handler(content_types=['text'])  # –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
def get_text_messages(message):
    line_message = message.text.title()
    line_words = line_message.split()

    if [line_message] in name_weather:
        token_bot.send_message(message.chat.id, weather('https://yandex.ru/pogoda/kozmodemyansk'))
    elif [line_message] in name_portfolio:
        token_bot.send_message(message.chat.id,
                               portfolio_stock('https://smart-lab.ru/q/portfolio/StepanBurimov/31269/'),
                               parse_mode='Markdown')
    elif [line_message] in name_brent:
        token_bot.send_message(message.chat.id, oil_brent())
    elif [line_message] in name_stock:
        token_bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π —Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä USD000UTSTOM - –±—É–¥–µ—Ç –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞:',
                               reply_markup=user_markup_end)
        token_bot.register_next_step_handler(message, other_stock)
    elif [line_message] in name_yandex_news:
        token_bot.send_message(message.chat.id, yandex_news(), parse_mode='Markdown')
    elif [line_message] in name_weather_other:
        token_bot.send_message(message.chat.id,
                               "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–∏–π—Å–∫–æ–º.",
                               reply_markup=user_markup_geo_end)
        token_bot.register_next_step_handler(message, other_weather)
    elif line_words[0] == "–¶–µ–Ω–∞" or line_words[0] == "Price":
        other_stock(message)
    else:
        token_bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")


token_bot.polling(none_stop=True)
